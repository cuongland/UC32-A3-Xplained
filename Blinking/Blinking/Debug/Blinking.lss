
Blinking.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000238  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000130  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          00000110  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000eee8  00000118  00000118  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000230  00000000  00000000  00002b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000495  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00002c61  00000000  00000000  00003225  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000a02  00000000  00000000  00005e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003100  00000000  00000000  00006888  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000364  00000000  00000000  00009988  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000010ae  00000000  00000000  00009cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000005f4  00000000  00000000  0000ad9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00584cb9  00000000  00000000  0000b38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 00000348  00000000  00000000  00590048  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf de 4c 	sub	pc,pc,-8628

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fe 50 	sub	pc,pc,-432

Disassembly of section .text:

80002008 <sysclk_init>:
80002008:	5e fc       	retal	r12
8000200a:	d7 03       	nop

8000200c <board_init>:
#endif



void board_init (void)
{
8000200c:	eb cd 40 c0 	pushm	r6-r7,lr
80002010:	20 4d       	sub	sp,16
    gpio_configure_pin(LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002012:	30 3b       	mov	r11,3
80002014:	32 3c       	mov	r12,35
80002016:	c6 1c       	rcall	800020d8 <gpio_configure_pin>
80002018:	30 3b       	mov	r11,3
    gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201a:	34 9c       	mov	r12,73
8000201c:	c5 ec       	rcall	800020d8 <gpio_configure_pin>
8000201e:	30 3b       	mov	r11,3
80002020:	32 2c       	mov	r12,34
    gpio_configure_pin(LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002022:	c5 bc       	rcall	800020d8 <gpio_configure_pin>
80002024:	30 3b       	mov	r11,3
80002026:	32 6c       	mov	r12,38
80002028:	c5 8c       	rcall	800020d8 <gpio_configure_pin>
    gpio_configure_pin(LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000202a:	30 4b       	mov	r11,4
8000202c:	32 1c       	mov	r12,33
8000202e:	c5 5c       	rcall	800020d8 <gpio_configure_pin>
80002030:	fe c9 fa 00 	sub	r9,pc,-1536

    gpio_configure_pin(GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002034:	f2 e6 00 08 	ld.d	r6,r9[8]
80002038:	30 2b       	mov	r11,2
    /* TWI Master GPIO pin configuration. */
    const gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
8000203a:	fa e7 00 08 	st.d	sp[8],r6
8000203e:	1a 9c       	mov	r12,sp
    gpio_enable_module(TWI_GPIO_MAP,
80002040:	f2 e6 00 00 	ld.d	r6,r9[0]
    /* TWI Master GPIO pin configuration. */
    const gpio_map_t TWI_GPIO_MAP =
		{
			{TWIMS0_TWD_PIN,  TWIMS0_TWD_FUNCTION  },
			{TWIMS0_TWCK_PIN, TWIMS0_TWCK_FUNCTION }
		};
80002044:	fa e7 00 00 	st.d	sp[0],r6
80002048:	c3 4c       	rcall	800020b0 <gpio_enable_module>
8000204a:	30 2b       	mov	r11,2
8000204c:	fe cc fa 4c 	sub	r12,pc,-1460
    gpio_enable_module(TWI_GPIO_MAP,
80002050:	c3 0c       	rcall	800020b0 <gpio_enable_module>
80002052:	30 4b       	mov	r11,4
	static const gpio_map_t COMPORT_GPIO_MAP =
		{
			{USART_RXD_PIN, USART_RXD_FUNCTION },
			{USART_TXD_PIN, USART_TXD_FUNCTION }
		};
	gpio_enable_module(COMPORT_GPIO_MAP,
80002054:	fe cc fa 44 	sub	r12,pc,-1468
80002058:	c2 cc       	rcall	800020b0 <gpio_enable_module>
8000205a:	2f cd       	sub	sp,-16
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000205c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80002060 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002060:	f8 08 16 05 	lsr	r8,r12,0x5
80002064:	a9 68       	lsl	r8,0x8
80002066:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000206a:	58 1b       	cp.w	r11,1
8000206c:	c1 50       	breq	80002096 <gpio_enable_module_pin+0x36>
8000206e:	c0 82       	brcc	8000207e <gpio_enable_module_pin+0x1e>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002070:	30 1b       	mov	r11,1
80002072:	f6 0c 09 4c 	lsl	r12,r11,r12
80002076:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002078:	91 ac       	st.w	r8[0x28],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000207a:	91 2c       	st.w	r8[0x8],r12
8000207c:	5e fd       	retal	0
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
8000207e:	58 2b       	cp.w	r11,2
80002080:	c1 10       	breq	800020a2 <gpio_enable_module_pin+0x42>
80002082:	58 3b       	cp.w	r11,3
80002084:	c0 20       	breq	80002088 <gpio_enable_module_pin+0x28>
80002086:	5e ff       	retal	1
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002088:	30 1b       	mov	r11,1
8000208a:	f6 0c 09 4c 	lsl	r12,r11,r12
8000208e:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002090:	91 9c       	st.w	r8[0x24],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002092:	91 2c       	st.w	r8[0x8],r12
80002094:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002096:	f6 0c 09 4c 	lsl	r12,r11,r12
8000209a:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000209c:	91 ac       	st.w	r8[0x28],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000209e:	91 2c       	st.w	r8[0x8],r12
800020a0:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020a2:	30 1b       	mov	r11,1
800020a4:	f6 0c 09 4c 	lsl	r12,r11,r12
800020a8:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800020aa:	91 9c       	st.w	r8[0x24],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020ac:	91 2c       	st.w	r8[0x8],r12
800020ae:	5e fd       	retal	0

800020b0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800020b0:	d4 21       	pushm	r4-r7,lr
800020b2:	18 97       	mov	r7,r12
800020b4:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020b6:	58 0b       	cp.w	r11,0
800020b8:	c0 e0       	breq	800020d4 <gpio_enable_module+0x24>
800020ba:	30 05       	mov	r5,0
800020bc:	0a 96       	mov	r6,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800020be:	6e 1b       	ld.w	r11,r7[0x4]
800020c0:	6e 0c       	ld.w	r12,r7[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020c2:	2f f6       	sub	r6,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800020c4:	2f 87       	sub	r7,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800020c6:	cc df       	rcall	80002060 <gpio_enable_module_pin>
800020c8:	18 45       	or	r5,r12
800020ca:	0c 34       	cp.w	r4,r6
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020cc:	fe 9b ff f9 	brhi	800020be <gpio_enable_module+0xe>
800020d0:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800020d2:	d8 22       	popm	r4-r7,pc
800020d4:	16 95       	mov	r5,r11
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020d6:	cf db       	rjmp	800020d0 <gpio_enable_module+0x20>

800020d8 <gpio_configure_pin>:
800020d8:	f8 08 16 05 	lsr	r8,r12,0x5
800020dc:	a9 68       	lsl	r8,0x8
800020de:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800020e2:	ed bb 00 02 	bld	r11,0x2
800020e6:	c1 e1       	brne	80002122 <gpio_configure_pin+0x4a>
		gpio_port->puers = 1 << (pin & 0x1F);
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 4c 	lsl	r12,r9,r12
800020ee:	f1 4c 00 74 	st.w	r8[116],r12
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800020f2:	ed bb 00 07 	bld	r11,0x7
800020f6:	c0 91       	brne	80002108 <gpio_configure_pin+0x30>
		if (flags & GPIO_BOTHEDGES) {
800020f8:	16 99       	mov	r9,r11
800020fa:	e2 19 01 80 	andl	r9,0x180,COH
800020fe:	c1 c0       	breq	80002136 <gpio_configure_pin+0x5e>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002100:	f1 4c 00 a8 	st.w	r8[168],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002104:	f1 4c 00 b8 	st.w	r8[184],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002108:	ed bb 00 00 	bld	r11,0x0
8000210c:	c1 11       	brne	8000212e <gpio_configure_pin+0x56>
		if (flags & GPIO_INIT_HIGH) {
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000210e:	ed bb 00 01 	bld	r11,0x1
80002112:	f1 fc 0a 15 	st.weq	r8[0x54],r12
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002116:	f1 fc 1a 16 	st.wne	r8[0x58],r12
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000211a:	f1 4c 00 44 	st.w	r8[68],r12
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000211e:	91 1c       	st.w	r8[0x4],r12
}
80002120:	5e fc       	retal	r12

#endif
	if (flags & GPIO_PULL_UP) {
		gpio_port->puers = 1 << (pin & 0x1F);
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002122:	30 19       	mov	r9,1
80002124:	f2 0c 09 4c 	lsl	r12,r9,r12
80002128:	f1 4c 00 78 	st.w	r8[120],r12
8000212c:	ce 3b       	rjmp	800020f2 <gpio_configure_pin+0x1a>
			gpio_port->ovrc = 1 << (pin & 0x1F);
		}

		gpio_port->oders = 1 << (pin & 0x1F);
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000212e:	f1 4c 00 48 	st.w	r8[72],r12
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002132:	91 1c       	st.w	r8[0x4],r12
}
80002134:	5e fc       	retal	r12
	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
		if (flags & GPIO_BOTHEDGES) {
			gpio_port->imr0c = 1 << (pin & 0x1F);
			gpio_port->imr1c = 1 << (pin & 0x1F);
		} else if (flags & GPIO_RISING) {
80002136:	16 99       	mov	r9,r11
80002138:	e2 19 02 80 	andl	r9,0x280,COH
8000213c:	c0 60       	breq	80002148 <gpio_configure_pin+0x70>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000213e:	f1 4c 00 a4 	st.w	r8[164],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002142:	f1 4c 00 b8 	st.w	r8[184],r12
80002146:	ce 1b       	rjmp	80002108 <gpio_configure_pin+0x30>
		} else if (flags & GPIO_FALLING) {
80002148:	16 99       	mov	r9,r11
8000214a:	e2 19 03 80 	andl	r9,0x380,COH
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000214e:	f1 fc 1a 2a 	st.wne	r8[0xa8],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002152:	f1 fc 1a 2d 	st.wne	r8[0xb4],r12
80002156:	cd 9b       	rjmp	80002108 <gpio_configure_pin+0x30>

80002158 <gpio_set_pin_low>:
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002158:	30 18       	mov	r8,1
8000215a:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000215e:	a5 9c       	lsr	r12,0x5
80002160:	a9 6c       	lsl	r12,0x8
80002162:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002166:	f9 48 00 58 	st.w	r12[88],r8
}
8000216a:	5e fc       	retal	r12

8000216c <gpio_toggle_pin>:
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000216c:	30 18       	mov	r8,1
8000216e:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_toggle_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002172:	a5 9c       	lsr	r12,0x5
80002174:	a9 6c       	lsl	r12,0x8
80002176:	e0 2c f0 00 	sub	r12,61440
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
8000217a:	f9 48 00 5c 	st.w	r12[92],r8
}
8000217e:	5e fc       	retal	r12

80002180 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002180:	e0 68 00 83 	mov	r8,131
80002184:	f0 0c 01 0c 	sub	r12,r8,r12
80002188:	fe 78 08 00 	mov	r8,-63488
8000218c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002190:	f2 ca ff c0 	sub	r10,r9,-64
80002194:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002198:	58 0c       	cp.w	r12,0
8000219a:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000219c:	fe c8 fb 5c 	sub	r8,pc,-1188
800021a0:	f8 0c 12 00 	clz	r12,r12
800021a4:	f0 09 00 39 	add	r9,r8,r9<<0x3
800021a8:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021ac:	72 18       	ld.w	r8,r9[0x4]
800021ae:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021b2:	5e fc       	retal	r12

800021b4 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800021b4:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800021b8:	fe c0 fd b8 	sub	r0,pc,-584

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800021bc:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800021c0:	d5 53       	csrf	0x15
  cp      r0, r1
800021c2:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800021c4:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800021c6:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800021c8:	c0 72       	brcc	800021d6 <idata_load_loop_end>
  st.d    r0++, r4
800021ca:	fe c2 fa 9a 	sub	r2,pc,-1382

800021ce <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800021ce:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800021d0:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800021d2:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021d4:	cf d3       	brcs	800021ce <idata_load_loop>

800021d6 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800021d6:	30 80       	mov	r0,8
  mov     r2, 0
800021d8:	e0 61 01 18 	mov	r1,280
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800021dc:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021de:	c0 62       	brcc	800021ea <udata_clear_loop_end>
  brlo    udata_clear_loop
800021e0:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800021e2:	30 03       	mov	r3,0

800021e4 <udata_clear_loop>:
800021e4:	a1 22       	st.d	r0++,r2
800021e6:	02 30       	cp.w	r0,r1
800021e8:	cf e3       	brcs	800021e4 <udata_clear_loop>

800021ea <udata_clear_loop_end>:
800021ea:	fe cf ff fa 	sub	pc,pc,-6
800021ee:	d7 03       	nop

800021f0 <main>:
800021f0:	d4 01       	pushm	lr
800021f2:	c0 df       	rcall	8000200c <board_init>
800021f4:	c0 af       	rcall	80002008 <sysclk_init>
800021f6:	34 9c       	mov	r12,73
800021f8:	cb 0f       	rcall	80002158 <gpio_set_pin_low>
800021fa:	32 2c       	mov	r12,34
800021fc:	ca ef       	rcall	80002158 <gpio_set_pin_low>
800021fe:	32 6c       	mov	r12,38
80002200:	ca cf       	rcall	80002158 <gpio_set_pin_low>
80002202:	33 1c       	mov	r12,49
	/* Insert system clock initialization code here (sysclk_init()). */	
	board_init();	
	sysclk_init();
	//turn on the led 1 2 3
	gpio_set_pin_low(AVR32_PIN_PX22);
	gpio_set_pin_low(AVR32_PIN_PB02);
80002204:	ca af       	rcall	80002158 <gpio_set_pin_low>
	gpio_set_pin_low(AVR32_PIN_PB06);
80002206:	33 2c       	mov	r12,50
80002208:	ca 8f       	rcall	80002158 <gpio_set_pin_low>
8000220a:	32 3c       	mov	r12,35
	gpio_set_pin_low(AVR32_PIN_PC04);
8000220c:	cb 0f       	rcall	8000216c <gpio_toggle_pin>
8000220e:	e1 b8 00 42 	mfsr	r8,0x108
	gpio_set_pin_low(AVR32_PIN_PC05);
80002212:	e0 69 e1 00 	mov	r9,57600
80002216:	f0 09 00 0a 	add	r10,r8,r9
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		//blinking the led0
		gpio_toggle_pin(AVR32_PIN_PB03);
8000221a:	e1 b9 00 42 	mfsr	r9,0x108
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000221e:	14 38       	cp.w	r8,r10
80002220:	e0 88 00 0c 	brls	80002238 <main+0x48>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002224:	12 38       	cp.w	r8,r9
80002226:	fe 98 ff fa 	brls	8000221a <main+0x2a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000222a:	12 3a       	cp.w	r10,r9
8000222c:	ce f3       	brcs	8000220a <main+0x1a>
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000222e:	e1 b9 00 42 	mfsr	r9,0x108
80002232:	14 38       	cp.w	r8,r10
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002234:	fe 9b ff f8 	brhi	80002224 <main+0x34>
80002238:	12 38       	cp.w	r8,r9
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000223a:	fe 9b ff e8 	brhi	8000220a <main+0x1a>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000223e:	cf 6b       	rjmp	8000222a <main+0x3a>

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	c3 de       	rcall	80002180 <_get_interrupt_handler>
80002508:	58 0c       	cp.w	r12,0
8000250a:	f8 0f 17 10 	movne	pc,r12
8000250e:	d6 03       	rete

80002510 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	c3 7e       	rcall	80002180 <_get_interrupt_handler>
80002514:	58 0c       	cp.w	r12,0
80002516:	f8 0f 17 10 	movne	pc,r12
8000251a:	d6 03       	rete

8000251c <_int2>:
8000251c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	c3 1e       	rcall	80002180 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	58 0c       	cp.w	r12,0
80002522:	f8 0f 17 10 	movne	pc,r12
80002526:	d6 03       	rete

80002528 <_int3>:
80002528:	30 3c       	mov	r12,3
8000252a:	c2 be       	rcall	80002180 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	f8 0f 17 10 	movne	pc,r12
80002532:	d6 03       	rete
80002534:	d7 03       	nop
80002536:	d7 03       	nop
80002538:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d7 03       	nop
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
